[main.c]
#include "main.hpp"

int main(void) {
	std::cout << "hello, world!" << std::endl;
}

[main.h]
#pragma once

#include <iostream>

[makefile]
# Minimal template makefile

SRC_DIR  := ./src
LIBS_DIR := ./libs
OUT_DIR  := ./out
BIN_DIR  := $(OUT_DIR)/bin

ALL_DIRS := $(SRC_DIR) $(LIBS_DIR) $(OUT_DIR) $(BIN_DIR)
TARGET   := $(BIN_DIR)/example
CC       := g++
CFLAGS   := -Wextra
LFLAGS   := 
INCLUDES := $(SRC_DIR)/
CPPFLAGS := 

SOURCES   := $(shell find $(SRC_DIR) -type f -name '*.cpp')
LIBS      := $(shell find $(LIBS_DIR) -type f -name '*.cpp')
OBJS      := $(patsubst %.cpp,$(OUT_DIR)/%.o,$(notdir $(SOURCES)))
OBJS_LIBS := $(patsubst %.cpp,$(OUT_DIR)/%.o,$(notdir $(LIBS)))

all: $(TARGET)

$(TARGET): $(OBJS) $(OBJS_LIBS) | $(ALL_DIRS)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(OBJS) $(OBJS_LIBS) -o $(TARGET) $(foreach inc, $(INCLUDES), -I $(inc)) $(LFLAGS)

$(OUT_DIR)/%.o: $(SRC_DIR)/%.cpp
	mkdir -p $(@D)/ && $(CC) $(CFLAGS) $(CPPFLAGS) -c $^ -o $@ $(foreach inc, $(INCLUDES), -I $(inc)) $(LFLAGS)

$(OBJS_LIBS):
	$(foreach lib, $(LIBS), $(CC) $(CFLAGS) $(CPPFLAGS) -c $(lib) -o $(patsubst %.c,$(OUT_DIR)/%.o,$(lib)) $(LFLAGS))

$(ALL_DIRS):
	@mkdir -p $@

clean:
	rm -r $(OUT_DIR)/*
